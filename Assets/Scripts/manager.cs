using System.Collections;
using System.Collections.Generic;
using System.IO;
using UnityEngine;
using SimpleJSON;

public class manager : MonoBehaviour {

	[SerializeField] fitter roomfitter;
	[SerializeField] GameObject building; 


	void Update () {
		if (Input.GetKeyDown (KeyCode.Space)) {
			roomfitter.create ();

		}

		if (Input.GetKeyDown (KeyCode.K)) {
			Debug.Log ("save the building");
			save ();
		}
		if (Input.GetKeyDown (KeyCode.L)) {
			Debug.Log ("load a building");
			load ();
		}
			
	}

	void save(){
		//json shit
		JSONObject data = new JSONObject();
		for (int i = 0; i < building.transform.childCount; i++) {
			JSONObject roomdata = new JSONObject();

			Transform container = building.transform.GetChild(i);
			Transform r = container.GetChild (0);

			roomdata ["room"] = r.gameObject.GetComponent<room> ().export ();
			//just get data for greens & people. the rest are generated by room and should be same when reloaded
			JSONObject greendata = new JSONObject();
			JSONObject peopledata = new JSONObject();
			int greencount = 0;
			int peoplecount = 0;
			for (int j = 1; j < r.transform.childCount; j++) {
				Transform roomchild = r.transform.GetChild (j);
				if (roomchild.name == "Green(Clone)") {
					JSONObject green = new JSONObject();
					green = roomchild.gameObject.GetComponent<green> ().export ();
					greendata[""+greencount] = green;
					greencount++;
				} else if (roomchild.name == "Person(Clone)") {
					JSONObject people = new JSONObject();
					people = roomchild.gameObject.GetComponent<person> ().export ();
					peopledata[""+peoplecount] = people;
					peoplecount++;
				}
			}
			roomdata ["greens"] = greendata;
			roomdata ["people"] = peopledata;
			roomdata ["xPos"].AsFloat = r.transform.position.x;
			roomdata ["yPos"].AsFloat = r.transform.position.y;
			roomdata ["zPos"].AsFloat = r.transform.position.z;
			data ["container"+i] = roomdata;
		}

		string timestamp = System.DateTime.Now.ToString("yyyyMMddHHmmss");
		WriteJSONtoFile ("Assets/Resources/Buildings", timestamp+".txt", data);
	}

	void load(){
		//other json shit
		JSONNode json = ReadJSONFromFile("Assets/Resources/Buildings", "asdfasf.txt");
	}

	//JSON stuff
	static void WriteJSONtoFile(string path, string fileName, JSONObject json){
		StreamWriter sw = new StreamWriter(path + "/" + fileName);

		sw.Write(json.ToString());

		sw.Close();
	}

	static JSONNode ReadJSONFromFile(string path, string fileName){
		StreamReader sr = new StreamReader (path + "/" + fileName);

		string resultstring = sr.ReadToEnd ();

		sr.Close ();

		JSONNode result = JSON.Parse (resultstring);

		return result;
	}

}
